generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String          @id
  name               String
  email              String          @unique
  companiesOwned     Company[]       @relation("CompanyOwner")
  companyMemberships CompanyMember[]
  projectMemberships ProjectMember[]
  assignedTasks      Task[]
  userBlog           Json? // ✅ JSON blog storage for user
}

model Company {
  id         String          @id @default(uuid())
  name       String          @unique
  ownerId    String
  owner      User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "CompanyOwner")
  members    CompanyMember[]
  projects   Project[]
  inviteCode String?          @unique @default(nanoid(10)) // Changed from optional to required with default generation
  createdAt  DateTime        @default(now())
}

model CompanyMember {
  id        String  @id @default(uuid())
  userId    String
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
  role      String  @default("member") // "owner", "admin", "member"

  @@unique([userId, companyId])
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String?
  companyId   String
  company     Company         @relation(fields: [companyId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  projectBlog Json? // ✅ JSON blog storage for project
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  role      String  @default("member") // "owner", "admin", "member"

  @@unique([projectId, userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  assignedTo  String
  assignee    User      @relation(fields: [assignedTo], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archived    Boolean   @default(false)
}
